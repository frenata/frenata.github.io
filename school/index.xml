<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>School on Kata Frenata</title>
    <link>http://frenata.me/school/index.xml</link>
    <description>Recent content in School on Kata Frenata</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 17 Apr 2017 14:07:20 +0700</lastBuildDate>
    <atom:link href="http://frenata.me/school/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Android Architecture, Part 2</title>
      <link>http://frenata.me/school/android-architecture-2/</link>
      <pubDate>Mon, 17 Apr 2017 14:07:20 +0700</pubDate>
      
      <guid>http://frenata.me/school/android-architecture-2/</guid>
      <description>&lt;p&gt;After bulding the basics of my &lt;a href=&#34;../android-architecture-1&#34;&gt;android app&lt;/a&gt;, I had a simple app that could display/edit lists of school terms. The problem? The requirements specified that the app have terms, courses associated with each term, assessments associated with each course, and notes associated with each course &lt;em&gt;or&lt;/em&gt; assessment.&lt;/p&gt;

&lt;p&gt;That was fine, after all I was armed with all kinds of SQL database design knowledge after 3 courses at WGU, so I rapidly stubbed out java classes for each of these entities. Each relationship was a simple many-to-one relationship, so &lt;code&gt;Course&lt;/code&gt; table needed to maintain a foreign key pointing to the associated &lt;code&gt;Term&lt;/code&gt;, the &lt;code&gt;Assessment&lt;/code&gt; table needed to maintain a foreign key pointing to the associated &lt;code&gt;Course&lt;/code&gt;, and so on.&lt;/p&gt;

&lt;p&gt;Each class handled it&amp;rsquo;s own table definition rules, and my &lt;code&gt;DBHelper&lt;/code&gt; class now opened the database, then when needing to create or upgrade, called methods from each entitiy class to create each table. Add some sample data in my main activity&amp;rsquo;s &lt;code&gt;onCreate&lt;/code&gt; method, and&amp;hellip; &lt;code&gt;Exceptions: table course does not exist&lt;/code&gt;. Since the database already existed and I hadn&amp;rsquo;t incremented the verison number, rerunning my app and calling more table creation methods did nothing. My very hacky fix was to uninstall the app and then reload it onto the emulator, although I just now realized that a more sensible idea would have been to create a simple method in the &lt;code&gt;DBHelper&lt;/code&gt; to drop all the tables and delete the database, then tie this to a menu action. Lesson learned.&lt;/p&gt;

&lt;p&gt;My database redefined, I turned to listing all the courses. And ran into the &lt;code&gt;ContentProvider&lt;/code&gt;, which in its &lt;code&gt;insert&lt;/code&gt;, &lt;code&gt;update&lt;/code&gt;, and &lt;code&gt;delete&lt;/code&gt; methods was referring directly to the &lt;code&gt;Term&lt;/code&gt; class. Did I need separate providers for each table? That didn&amp;rsquo;t seem right.&lt;/p&gt;

&lt;p&gt;After chewing on the problem for a while (and sleeping on it, which always helps me), I settled on the pattern explained in &lt;a href=&#34;http://stackoverflow.com/questions/3814005/best-practices-for-exposing-multiple-tables-using-content-providers-in-android&#34;&gt;this stackoverflow post&lt;/a&gt;. I didn&amp;rsquo;t realize it at the time, but this style is used internally by android as well. An example, from my finished ContentProvider:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@Override
public int update(
		Uri uri, 
		ContentValues values, 
		String selection, 
		String[] selectionArgs) {

	String table;

	switch (uriMatcher.match(uri)) {
		case TERMS:
			table = Term.TABLE; break;
		case COURSES:
			table = Course.TABLE; break;
		case ASSESSMENTS:
			table = Assessment.TABLE; break;
		case COURSE_NOTES:
			table = CourseNote.TABLE; break;
		case ASSESSMENT_NOTES:
			table = AssessmentNote.TABLE; break;
		default:
			table = &amp;quot;&amp;quot;; break;
	}
	return !table.isEmpty() ?
		database.update(table,
				values,
				selection,
				selectionArgs) : 0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This general pattern proved hugely useful, so that the &lt;code&gt;ContentProvider&lt;/code&gt; handled most aspects of interacting with the database correctly, so long as it was given the proper URI, which are defined as public constants in the &lt;code&gt;ContentProvider&lt;/code&gt; itself. Because it was also necessary for courses to understand what term they were in and build the appropriate WHERE clause, the classes are sadly fairly coupled together, but having the &lt;code&gt;ContentProvider&lt;/code&gt; handle most aspects of DB interaction is a step in the right direction. Further refactoring could likely reduce coupling throughout the codebase.&lt;/p&gt;

&lt;p&gt;From this point on, I implemented the entire database structure as specified by the requirements, absent pictures in notes, which I decided to save for another day.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Android Architecture, Part 1</title>
      <link>http://frenata.me/school/android-architecture-1/</link>
      <pubDate>Sat, 15 Apr 2017 21:39:47 +0700</pubDate>
      
      <guid>http://frenata.me/school/android-architecture-1/</guid>
      <description>&lt;p&gt;Frustrated by communication issues while working on my WGU capstone/thesis, I recently turned to the only other class I have left: Mobile Application Development. I was fairly excited by this (I get to build Android apps!), but the reality of the class was somewhat intimidating. There is no objective assessment, only a performance assessment that involves building an actual app. Fine. But provided materials are&amp;hellip;minimal. No problem, I thought, since android development is so popular there should be plenty of information freely available on the web!&lt;/p&gt;

&lt;p&gt;While my original plan was to work through some of Udacity&amp;rsquo;s free material on Android, then to launch into the class project, I realized that the time left in my term was quickly running out. Not having time to learn it &amp;ldquo;the right way&amp;rdquo;, I resolved to &amp;ldquo;fake it until I made it,&amp;rdquo; passing the class, and revisiting android development proper when my time permits. My first step was to follow a tutorial to build a working app along similar lines to what I needed to eventually build. I pulled from two tutorials to get the basics rolling:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Lynda&amp;rsquo;s &lt;a href=&#34;https://www.lynda.com/Android-tutorials/Building-Note-Taking-App-Android/377485-2.html&#34;&gt;Note-Taking App&lt;/a&gt; video tutorial, which was specifically linked on the WGU course page&lt;/li&gt;
&lt;li&gt;Vogella&amp;rsquo;s &lt;a href=&#34;http://www.vogella.com/tutorials/AndroidSQLite/article.html&#34;&gt;Android SQLite database tutorial&lt;/a&gt;, which is just text and lots of code samples, covering a variety of ways to interact with a SQLite database in Android&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I primarily followed the Lynda tutorials, adjusting and learning as I went. For instance, that tutorial uses a very simple DB table with just two columns: the text of the note and the id (primary key) of the note. For even the simplest of my tables I needed to store at least 4 pieces of information: a term title, start and end dates, and the id. Thus my app quickly diverged from the tutorial, with multiple relevant fields complicating the layout files. To list data, android provides some basic list layouts, but they hold only up to two pieces of info. Since I wanted to dispaly three pieces of information, I had to build my own custom list layout.&lt;/p&gt;

&lt;p&gt;I kept the basic class structure the same, although looking forward somewhat I seperated my &lt;code&gt;TermTable&lt;/code&gt;, representing a single SQL table, from my &lt;code&gt;SchedulerDBHelper&lt;/code&gt;, which opens/creates/upgrades the database itself, and my &lt;code&gt;SchedulerProvider&lt;/code&gt;, which is a ContentProvider to allow &amp;ldquo;easy&amp;rdquo; access to the database. Early on, I also implemented a separate &lt;code&gt;Term&lt;/code&gt; class to handle bundling of the values from the &lt;code&gt;TermTable&lt;/code&gt; table, but I later merged these together into a single class called &lt;code&gt;Term&lt;/code&gt;, to handle all things related to a &amp;ldquo;term&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;From that point on, working through the rest of the tutorials was relatively straightforward, until I had a working app that let me display lists of terms and edit them, all backed by a SQLite database. But of course, this was only the beginning.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>elastic</title>
      <link>http://frenata.me/school/elastic/</link>
      <pubDate>Sat, 04 Feb 2017 15:41:19 +0700</pubDate>
      
      <guid>http://frenata.me/school/elastic/</guid>
      <description>&lt;p&gt;I&amp;rsquo;m diving into learning the Elastic stack: Logstash, Elasticsearch, Kibana. My aim is to use it to enable the local school here to extract useful information from the reams of lesson plan .docs they have laying around. Useless data right now.&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s &lt;em&gt;a bunch&lt;/em&gt; going on, and the actual process I&amp;rsquo;ll need to follow to ETL the data I do have into a usuable state isn&amp;rsquo;t entirely clear to me yet. I know I can just throw it into elastic and get full text search, but the data is semi-structured already, so I&amp;rsquo;d like to be able to extract ESLRs, times, teacher names into fields outright.&lt;/p&gt;

&lt;p&gt;Too much theory on a bunch of interlocking systems is confusing, so my next task is to follow the &lt;a href=&#34;https://www.elastic.co/guide/en/elasticsearch/guide/current/index.html&#34;&gt;documentation&lt;/a&gt;, test some simpler use cases, then work back on my desired project.&lt;/p&gt;

&lt;p&gt;I anticipate this will be my WGU capstone, so I&amp;rsquo;ll be working up lots of documentation along the way.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hustle</title>
      <link>http://frenata.me/school/Hustle/</link>
      <pubDate>Mon, 23 Jan 2017 12:08:06 +0700</pubDate>
      
      <guid>http://frenata.me/school/Hustle/</guid>
      <description>&lt;p&gt;After spending what seemed like the entire month of December and about half of January doing nothing but schoolwork, life is calming down. Between me and graduation are only 3 things:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the OCP certification test&lt;/li&gt;
&lt;li&gt;a prescribed Android app project&lt;/li&gt;
&lt;li&gt;my capstone, essentially this is a senior thesis that will need to heavily emphasize the SDLC&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I have plenty of time. So much so that in addition to planning to buck for a capstone excellence award, I have time and energy to devote to other things.&lt;/p&gt;

&lt;p&gt;Beyond raising the sweet baby Reuel I mean.&lt;/p&gt;

&lt;p&gt;Where am I allocating this excess of energy? After all, one can&amp;rsquo;t study for the OCP all day every day.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I&amp;rsquo;ve gone back to doing some FCC exercises, and hanging out in their gitter. My knowledge of JS, espespecially the advanced frameworks, is pretty sparse and although I don&amp;rsquo;t exactly want to develop React apps for a living, I figure it can only make me more well rounded.&lt;/li&gt;
&lt;li&gt;In contrast, the little time I&amp;rsquo;ve spent learning the basics of infosec/pentesting is so much more deligtful, if less directly applicable to career advancement.&lt;/li&gt;
&lt;li&gt;Which brings up the major way I&amp;rsquo;ve spent time, in job/interview prep of one variety or another. At a minmum I need to beat my resume into something workable, highlighting as much as possible what experince I do have.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Blogging is sadly not yet part of my daily or weekly workflow, though perhaps it should be. I&amp;rsquo;m getting there, and hope to write more about all of the above.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>the rabbit</title>
      <link>http://frenata.me/school/the-rabbit/</link>
      <pubDate>Tue, 20 Dec 2016 11:10:31 +0700</pubDate>
      
      <guid>http://frenata.me/school/the-rabbit/</guid>
      <description>&lt;p&gt;The goal is to sit and pass CompTIA&amp;rsquo;s Security+ by the end of the week. Scheduling shouldn&amp;rsquo;t be a problem, but I&amp;rsquo;m only halfway through the material an Tuesday morning. I&amp;rsquo;ll need to prove I&amp;rsquo;m ready by the end of Wednesday.&lt;/p&gt;

&lt;p&gt;Away!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>a day with elixir</title>
      <link>http://frenata.me/school/a-day-with-elixir/</link>
      <pubDate>Sun, 18 Dec 2016 22:42:47 +0700</pubDate>
      
      <guid>http://frenata.me/school/a-day-with-elixir/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve pushed hard at schoolwork for the past two weeks, and a day of Rest presented itself. No new studies, no reviews, no school.&lt;/p&gt;

&lt;p&gt;But what to do?&lt;/p&gt;

&lt;p&gt;Polyglot that I am, the day&amp;rsquo;s learning was set aside to learn a new language: &lt;a href=&#34;//elixir-lang.org/&#34;&gt;Elixir&lt;/a&gt;. I&amp;rsquo;ve played with some functional languages previously, notably Clojure and Rust, but neither truly caught my heart. Elixir has frequently popped up in comparison to one of my current favorites, Go, which has a &lt;em&gt;somewhat&lt;/em&gt; similar concurrency philosophy.&lt;/p&gt;

&lt;p&gt;Installing it was simple, &lt;code&gt;pacman -S elixir&lt;/code&gt; handling everything that was needed. Before launching into exercises directly I read through the official getting started guide, then looked around for a style guide along the lines of &lt;code&gt;gofmt&lt;/code&gt; or &lt;code&gt;autopep8&lt;/code&gt;. Nothing exactly right was there, but the lovely &lt;a href=&#34;http://elixirkoans.io/&#34;&gt;Elixir Koans&lt;/a&gt; kept me thrumming back and forth in the guts of the language&amp;rsquo;s syntax. Setting Vim up to auto-save made this particularly pleasurable. Afterwards I &lt;a href=&#34;http://exercism.io/submissions/c1513aa32b674e7183930bd1d178e991&#34;&gt;exercised&lt;/a&gt; and tried to think/write/code in the proper paradigm.&lt;/p&gt;

&lt;p&gt;And that was more or less all I had time for.&lt;/p&gt;

&lt;p&gt;The language has its oddities (&lt;code&gt;|&amp;gt;&lt;/code&gt;?) but was sharply functional, not tied to the sluggishly starting JVM, and easy to work with. I suspect I will return to it. The Actor model of concurrency is distinctly interesting and had me imagining what it could do in the kind of heavy simulation ala Dwarf Fortress that I&amp;rsquo;ve been interested in pursuing.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>in media res</title>
      <link>http://frenata.me/school/in-media-res/</link>
      <pubDate>Thu, 15 Dec 2016 22:06:40 +0700</pubDate>
      
      <guid>http://frenata.me/school/in-media-res/</guid>
      <description>&lt;p&gt;Less than a month has passed of my second term at &lt;a href=&#34;//wgu.edu&#34;&gt;WGU&lt;/a&gt;, and I&amp;rsquo;m just about done with my enrolled classes for the 6 month term. A couple of database classes are in hand, as is CompTIA&amp;rsquo;s Network+ certification, all that remains officially is a database adminstration class on the hairier parts of SQL.&lt;/p&gt;

&lt;p&gt;Of course I don&amp;rsquo;t plan on stopping there. The winter school break presents me with a rare opportunity&amp;ndash;the chance to schedule certification tests during the work week without having to worry about who will take care of the baby. To that end, my goal is to further finish the Security+ and Project+ certifications before 9 January. With focus, it should just be possible.&lt;/p&gt;

&lt;p&gt;I started at WGU in March of 2016, all the GenEd credits out of the way and about 95 credits to do in order to finish a bachelor&amp;rsquo;s degree long delayed. 44 remain, and by early January only 33 will remain. My longterm aim is now to finish the entirety of the degree plan by the end of May, marking 15 months and 2 terms of study.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>