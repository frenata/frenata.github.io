<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Kata Frenata</title>
    <link>http://frenata.me/index.xml</link>
    <description>Recent content on Kata Frenata</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 15 May 2017 10:50:36 +0700</lastBuildDate>
    <atom:link href="http://frenata.me/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Keeping a Weekly Schedule</title>
      <link>http://frenata.me/blog/schedule/</link>
      <pubDate>Mon, 15 May 2017 10:50:36 +0700</pubDate>
      
      <guid>http://frenata.me/blog/schedule/</guid>
      <description>

&lt;p&gt;Since finishing up at WGU, I&amp;rsquo;ve felt myself floundering for lack of structure. I was getting stuff done&amp;hellip;but it was a little bit of that, a little bit of this, ooh that looks interesting, squirrel!&lt;/p&gt;

&lt;p&gt;I knew I needed some added structure to shape and guide my learning, but what?&lt;/p&gt;

&lt;p&gt;This became even more relevant once I landed a couple of freelancing jobs. Huge portions of my days are spent caring for an infant, so I can&amp;rsquo;t afford to &lt;em&gt;not&lt;/em&gt; be productive when I have the chance. I still wanted to keep pushing myself to learn, and I mananged to narrow down the domains I would spend my time with to two: functional programming and security. Plus maths. Knowing that maths will pay off in pretty much every aspect of software/CS that I later delve into, I wanted to refresh my math.&lt;/p&gt;

&lt;p&gt;Still, simply resolving what to focus on felt insufficient. On any given day I was simply going with sounded good that day, which meant I might spend a few days on a subject, but let another subject lie dormant. A subject a day&amp;hellip;keeps the teacher away?&lt;/p&gt;

&lt;h3 id=&#34;the-schedule&#34;&gt;The Schedule&lt;/h3&gt;

&lt;p&gt;Reflection Sunday&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a day for writing and thinking about my learning, and meta-cognition in general&lt;/li&gt;
&lt;li&gt;also humanities reading&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Math Monday&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;keeping a heavy focus on &amp;ldquo;pure&amp;rdquo; math, in whatever forms&lt;/li&gt;
&lt;li&gt;currently: refreshing Calculus via &lt;a href=&#34;https://www.coursera.org/learn/calculus1&#34;&gt;tOSU&amp;rsquo;s excellent MOOC @Coursera&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;future: Calculus 2, linear algebra, predicate calculus&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Work Tuesday&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;focus on projects and gigs&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Crypto Wednesday&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;focus on security issues, either InfoSec broadly or AppSec&lt;/li&gt;
&lt;li&gt;includes penetration testing exercises and games&lt;/li&gt;
&lt;li&gt;currently: &lt;a href=&#34;https://www.coursera.org/learn/crypto/&#34;&gt;Cryptography 1&lt;/a&gt; and &lt;a href=&#34;http://cryptopals.com&#34;&gt;CryptoPals&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;future: various other wargames and CTFs&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Work Thursday&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;see Tuesday&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Functional Friday&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;focus on functional programming in all aspects, this is in many ways applied math of course

&lt;ul&gt;
&lt;li&gt;currently: learning Elm &lt;a href=&#34;https://guide.elm-lang.org&#34;&gt;official guide&lt;/a&gt; and &lt;a href=&#34;https://www.elm-tutorial.org/en/&#34;&gt;web app tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;future: Elixir, Haskell, Clojure&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Wildcard Saturday&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a day to do the things that don&amp;rsquo;t fit anywhere else&lt;/li&gt;
&lt;li&gt;ideally by keeping this a dedicated day, I won&amp;rsquo;t get distracted by something shiny and can instead say &amp;ldquo;I&amp;rsquo;ll play with it on Saturday&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;in-practice&#34;&gt;In Practice&lt;/h3&gt;

&lt;p&gt;I may not keep to this 100% of the time but I&amp;rsquo;m hoping to be fairly strict. Additionally, the educational focus on any given day may only be an hour or two, depending on my need to focus on various projects and take care of the baby.&lt;/p&gt;

&lt;p&gt;On the advice of my own personal Master of Education, I&amp;rsquo;ll also try to sprinkle in some short math exercises throughout the week to better retain the math I learn. Perhaps via Khan Academy?&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Speedrun: File Metadata Service</title>
      <link>http://frenata.me/blog/speedrun-file-metadata/</link>
      <pubDate>Tue, 09 May 2017 21:14:14 +0700</pubDate>
      
      <guid>http://frenata.me/blog/speedrun-file-metadata/</guid>
      <description>

&lt;h3 id=&#34;fresh-links&#34;&gt;Fresh Links&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://api.frenata.net/files/&#34;&gt;Deployed App&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/frenata/api-frenata/tree/master/src/files&#34;&gt;GitHub repo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;one-step-at-a-time&#34;&gt;One Step at a Time&lt;/h3&gt;

&lt;p&gt;There several features I needed to implement for this project that I hadn&amp;rsquo;t done previously:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;serving actual html, rather than just instruction text or JSON responses&lt;/li&gt;
&lt;li&gt;distinguishing and using both GET and POST methods&lt;/li&gt;
&lt;li&gt;and then of course the core &amp;ldquo;problem&amp;rdquo; of allowing a user to upload a file and figuring out how to extract data from that file.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I thus broke the problem down into small achievable pieces.&lt;/p&gt;

&lt;p&gt;First I focused simply on serving html. I defined a file called &amp;ldquo;formfile.gtpl&amp;rdquo;, and after some poking settled on putting it in a new directory in the project root called static. The early version I used looked something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;html&amp;gt;
	&amp;lt;head&amp;gt;&amp;lt;title&amp;gt;File Metadata Service&amp;lt;/title&amp;gt;
	&amp;lt;/head&amp;gt;
	&amp;lt;body&amp;gt;
		&amp;lt;form action = &amp;quot;/files&amp;quot; method = &amp;quot;POST&amp;quot;&amp;gt;
			Testing:&amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;test&amp;quot; /&amp;gt;
			&amp;lt;input type=&amp;quot;submit&amp;quot; value=&amp;quot;Submit&amp;quot; /&amp;gt;
		&amp;lt;/form&amp;gt;
	&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Initially my handler simply wrote this file to the page on every request. Done.&lt;/p&gt;

&lt;h3 id=&#34;the-postman-cometh&#34;&gt;The POSTman cometh&lt;/h3&gt;

&lt;p&gt;Next I needed to actually handle both GET and POST methods. A &lt;a href=&#34;https://astaxie.gitbooks.io/build-web-application-with-golang/en/04.1.html&#34;&gt;chapter&lt;/a&gt; from a book about building web applications with Go proved useful. A simple &lt;code&gt;if/else&lt;/code&gt; checking &lt;code&gt;r.Method&lt;/code&gt; was sufficient. For a GET request, I served the html file. For a POST request&amp;hellip; I parsed the form, then echoed the value of my &amp;ldquo;test&amp;rdquo; value: &lt;code&gt;io.WriteString(w, r.Form[&amp;quot;test&amp;quot;][0])&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Nothing happened! Eventually I narrowed this down to a matter of routes: while my default route to this service was /files/, the POST request was trying to request /files. I don&amp;rsquo;t entirely understand the &lt;em&gt;why&lt;/em&gt; here, but routing both requests to the files handler proved sufficient to get things working.&lt;/p&gt;

&lt;p&gt;I was GETing and POSTing like a PRO.&lt;/p&gt;

&lt;h3 id=&#34;files-full-of-them&#34;&gt;Files Full of &amp;hellip;Them&lt;/h3&gt;

&lt;p&gt;I added a file input to my form, simple enough, and turned to the matter of dealing with it in my code. My early research had turned up a promising standard library function call, &lt;a href=&#34;https://golang.org/pkg/net/http/#Request.FormFile&#34;&gt;FormFile&lt;/a&gt;. However after struggling with it for a while I realized that despite the documentation saying that &amp;ldquo;FormFile calls ParseMultipartForm and ParseForm if necessary.&amp;rdquo;, I seemed to need to call &lt;code&gt;ParseMultipartForm&lt;/code&gt; myself. Perhaps I missed something.&lt;/p&gt;

&lt;p&gt;I dug into the details of the data returned by &lt;code&gt;FormFile&lt;/code&gt;. I had immediate access, through the header, to the filename and the file headers, but &lt;em&gt;size&lt;/em&gt;, my main goal, wasn&amp;rsquo;t present in those headers. I did start echoing the filename back as a proof of concept. Deep into the documentation: the backing structure &lt;em&gt;might&lt;/em&gt; be an &lt;code&gt;*os.File&lt;/code&gt; (which I could treat like any ordinary file, and get the size from), but it might not. Bummer. All I really had access to was the interfaces defined on &lt;code&gt;multipart.File&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;type File interface {
	io.Reader
	io.ReaderAt
	io.Seeker
	io.Closer
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I knew how to use a &lt;code&gt;Reader&lt;/code&gt;, so I tried just reading from a file, making a buffer and loading the data into the buffer&amp;hellip;then checking the size. That might have worked, but it didn&amp;rsquo;t feel like the right approach. I didn&amp;rsquo;t care about the actual data, only how much of it there was.&lt;/p&gt;

&lt;h3 id=&#34;on-the-shoulders-of-giants&#34;&gt;On the Shoulders of Giants&lt;/h3&gt;

&lt;p&gt;Some googling around the problem turned up a lovely guide to doing &lt;a href=&#34;https://medium.com/dtoebe/how-to-get-a-multipart-file-size-in-golang-3ab4ab4c3e3&#34;&gt;precisely&lt;/a&gt; what I wanted. In short, the author recommended attempting to type switch to &lt;code&gt;os.File&lt;/code&gt;, grabbing the size the normal way if that succeeded, and otherwise using the &lt;code&gt;Seek&lt;/code&gt; method to find the size. The relevant code looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var size int64
switch t := file.(type) {
case *os.File:
	stats, _ := t.Stat()
	size = stats.Size()
default:
	bytes, _ := file.Seek(0, 2)
	size = bytes
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The somewhat arcane &lt;code&gt;file.Seek(0, 2)&lt;/code&gt; means, starting from the beginning, scan through the file until the end, and return the number of bytes passed over. Perfect!&lt;/p&gt;

&lt;h3 id=&#34;wrap-it-up&#34;&gt;Wrap It Up!&lt;/h3&gt;

&lt;p&gt;Only a few things remained. Though the user stories don&amp;rsquo;t required it, I added both the filename and the Content-Type to the JSON response. I had immediate access to them anyway through the file header, so why not?&lt;/p&gt;

&lt;p&gt;I had also early on accidentally clicked &amp;ldquo;Submit&amp;rdquo; without actually picking a file and crashed the program, so I dealt with it now. It feels like a bit of a kludge, but I simple redirected back to the main route and quit the handler, which will then immediately be fired again. I decided to print no error to the user.&lt;/p&gt;

&lt;p&gt;Finally, I added a slightly more helpful message on the main html page.&lt;/p&gt;

&lt;h3 id=&#34;room-for-improvement&#34;&gt;Room for Improvement&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;a bit of refactoring love wouldn&amp;rsquo;t hurt&lt;/li&gt;
&lt;li&gt;investigate why /files/ vs /files matters&lt;/li&gt;
&lt;li&gt;what other file metadata could reasonably be extracted?&lt;/li&gt;
&lt;li&gt;there is a memory limit by nature of how &lt;code&gt;ParseMultipartForm&lt;/code&gt; works, so reporting some kind of error message (via JSON?) to users who attempt to upload large files is probably a good idea&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Speedrun: Image Search</title>
      <link>http://frenata.me/blog/speedrun-images/</link>
      <pubDate>Mon, 08 May 2017 20:43:49 +0700</pubDate>
      
      <guid>http://frenata.me/blog/speedrun-images/</guid>
      <description>

&lt;h3 id=&#34;fresh-links&#34;&gt;Fresh Links&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://api.frenata.net/images/&#34;&gt;Deployed App&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/frenata/api-frenata/tree/master/src/images&#34;&gt;GitHub repo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;my-kingdom-for-an-api-that-works&#34;&gt;My Kingdom for an API (that works!)&lt;/h3&gt;

&lt;p&gt;By far the most complicated thing about this project was finding the right API to work with. Historical reading indicated that Google&amp;rsquo;s Image Search API had once been fairly open, but do they even pretend that their motto is &amp;ldquo;Don&amp;rsquo;t be evil&amp;rdquo; these days?&lt;/p&gt;

&lt;p&gt;Imgur seemed a likely candidate, but unfortunately there seemed to be no easy way to request non-album images, and no easy way to extract a direct link to the image contained &lt;em&gt;in&lt;/em&gt; an album, and therefore no way to build thumbnail links. Drat.&lt;/p&gt;

&lt;p&gt;Eventually I settled on Flickr, and I had to dust off an ancient Yahoo! email address to do so.&lt;/p&gt;

&lt;h3 id=&#34;build-your-own-url&#34;&gt;Build your own URL&lt;/h3&gt;

&lt;p&gt;The most perplexing thing about the Flickr API was that no direct link was provided in the data. Instead, provided are various pieces of data that must be manually pieced together, as their &lt;a href=&#34;https://www.flickr.com/services/api/misc.urls.html&#34;&gt;documentation&lt;/a&gt; explains:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;You can construct the source URL to a photo once you know its ID, server ID, farm ID and secret, as returned by many API methods.

The URL takes the following format:

https://farm{farm-id}.staticflickr.com/{server-id}/{id}_{secret}.jpg
	or
https://farm{farm-id}.staticflickr.com/{server-id}/{id}_{secret}_[mstzb].jpg
	or
https://farm{farm-id}.staticflickr.com/{server-id}/{id}_{o-secret}_o.(jpg|gif|png)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I&amp;rsquo;m still not sure why they do it this way, but it wasn&amp;rsquo;t too hard to wire everything together from the raw API results.&lt;/p&gt;

&lt;h3 id=&#34;a-series-of-tubes&#34;&gt;A Series of Tubes&lt;/h3&gt;

&lt;p&gt;The verboseness of Go bit me a bit on this one, since although it makes decoding and encoding JSON values relatively easy via &lt;code&gt;struct&lt;/code&gt;s, I needed to work with three separate kinds of data structures: the incoming data from Flickr:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;type ImageData struct {
	Id     string `json:&amp;quot;id&amp;quot;`
	Secret string `json:&amp;quot;secret&amp;quot;`
	Server string `json:&amp;quot;server&amp;quot;`
	Title  string `json:&amp;quot;title&amp;quot;`
	Farm   int    `json:&amp;quot;farm&amp;quot;`
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The outgoing response given to &lt;em&gt;my&lt;/em&gt; client:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;type ImageResponse struct {
	Uri       string `json:&amp;quot;uri&amp;quot;`
	Thumbnail string `json:&amp;quot;thumbnail&amp;quot;`
	Text      string `json:&amp;quot;text&amp;quot;`
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And the outgoing response for a &amp;ldquo;latest search&amp;rdquo; request:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;type Search struct {
	Term string `json:&amp;quot;term&amp;quot;`
	When string `json:&amp;quot;when&amp;quot;`
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Only &lt;code&gt;ImageResponse&lt;/code&gt; truly needed a dedicated constructor, mostly to run through the URL construction hoops, but this got a bit wordy, especially once accomodating the need for array structures and functions to prettily print all of this. The entire thing could do with a decent refactor, since I&amp;rsquo;m fairly sure my &lt;code&gt;String() string&lt;/code&gt; function is exactly the same for each structure.&lt;/p&gt;

&lt;h3 id=&#34;it-s-the-latest-show&#34;&gt;It&amp;rsquo;s the Latest Show!&lt;/h3&gt;

&lt;p&gt;&amp;ldquo;Show the 10 most recent image searches&amp;rdquo; doesn&amp;rsquo;t seem like the kind of user story that really needs true data persistence, so I decided to just hold search history in a simple array that cuts off the oldest entry when it exceeds 10 entries.&lt;/p&gt;

&lt;p&gt;This worked out just fine but is also when Heroku&amp;rsquo;s free tier really bit me too (I sense a pattern), since when Heroku sends the application to sleep, it flushes the memory. Any request sent to the server wakes it, but this effectively means that the search history is limited to the latest session.&lt;/p&gt;

&lt;p&gt;Of course this could be avoided by paying $7/month to run this service non-stop, but I&amp;rsquo;m not there yet.&lt;/p&gt;

&lt;h3 id=&#34;room-for-improvement&#34;&gt;Room for Improvement&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;some serious refactoring to remove code duplication should/could be done&lt;/li&gt;
&lt;li&gt;added parameters along with &amp;ldquo;offset&amp;rdquo; would be pretty easy to implement, perhaps one that sets the size of the thumbnail?&lt;/li&gt;
&lt;li&gt;the original demo had a &amp;ldquo;context&amp;rdquo; field, although it wasn&amp;rsquo;t listed as a user story. Could I return something sensible in this case anyway? The owner of the picture&amp;rsquo;s profile?&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Speedrun: URL Shortener</title>
      <link>http://frenata.me/blog/speedrun-shortener/</link>
      <pubDate>Thu, 04 May 2017 14:51:44 +0700</pubDate>
      
      <guid>http://frenata.me/blog/speedrun-shortener/</guid>
      <description>

&lt;h3 id=&#34;fresh-links&#34;&gt;Fresh Links&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://api.frenata.net/tiny/&#34;&gt;Deployed App&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/frenata/api-frenata/tree/master/src/tiny&#34;&gt;GitHub repo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;one-repo-to-rule-them-all&#34;&gt;One Repo to Rule Them All&lt;/h3&gt;

&lt;p&gt;I spent a good deal of time before/during/after writing the URL shortener itself on infrastructure, so it seems reasonable to discuss it here. Working with subtrees and orphaned branches was a bit annoying on my previous speedrun attempts, and since the &lt;em&gt;final&lt;/em&gt; objective was to unite all the projects together anyway&amp;hellip;&lt;/p&gt;

&lt;p&gt;I decided to do it early.&lt;/p&gt;

&lt;p&gt;First, I got my heroku account verified and my own domain name pointing to one of my projects there.&lt;/p&gt;

&lt;p&gt;Then I set up a new git repo, and merged the previous two orphaned branches into it.&lt;/p&gt;

&lt;p&gt;Then I reorganized my existing code into packages, a &lt;code&gt;main&lt;/code&gt; package with that distributed routes to other packages, each of which would handle its own microservice. Here&amp;rsquo;s what my new main function looks like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func main() {
	// get bound port of host system
	port := os.Getenv(&amp;quot;PORT&amp;quot;)

	http.HandleFunc(&amp;quot;/&amp;quot;, index)
	http.HandleFunc(timestamp.ROUTE, timestamp.Handler)
	http.HandleFunc(headers.ROUTE, headers.Handler)
	http.HandleFunc(tiny.ROUTE, tiny.Handler)
	log.Fatal(http.ListenAndServe(&amp;quot;:&amp;quot;+port, nil))
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Simple and sweet, all the logic internal to the services is contained in those services, including the routes they should be served on!&lt;/p&gt;

&lt;h3 id=&#34;persistence-pays&#34;&gt;Persistence Pays&lt;/h3&gt;

&lt;p&gt;I knew that a critical question was data persistence, and I also knew that I wanted to do this with a minimum of fuss, as befits a &amp;ldquo;speed run,&amp;rdquo; so I decided not to skip using a database&amp;hellip;&lt;/p&gt;

&lt;p&gt;But since heroku pulls things down after inactivity on the free tier, I needed at least some kind of persistence, or the generated short addresses would likely only last as long as a dyno was active. So I decided to do the simplest possible thing, and just write to a file. This would almost certainly be a &lt;em&gt;terrible&lt;/em&gt; idea in any kind of production server due to a variety of threading issues, but I determined that it was acceptable for what I viewed as a proof of concept.&lt;/p&gt;

&lt;p&gt;For doing this write I used the following function:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func writeDB(sr ShortenerResponse) {
	f, err := os.OpenFile(DB, os.O_APPEND|os.O_WRONLY|os.O_CREATE, 0600)
	if err != nil {
		panic(err)
	}
	defer f.Close()

	data, _ := json.Marshal(sr)
	if _, err = f.Write(append(data, &#39;\n&#39;)); err != nil {
		panic(err)
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In short, this opens a file in &amp;ldquo;append&amp;rdquo; mode, creating it if it doesn&amp;rsquo;t already exist, and writes a JSON object to the file, being sure to close this file before the function ends (the purpose of &lt;code&gt;defer f.Close()&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Another function &lt;code&gt;init&lt;/code&gt;, which in go runs only when the package is first loaded, reads from this same file (if it exists) and loads the contents into memory.&lt;/p&gt;

&lt;h3 id=&#34;map-the-world&#34;&gt;Map the World!&lt;/h3&gt;

&lt;p&gt;The objects themselves were built from a now familiar go &lt;code&gt;struct&lt;/code&gt; with JSON tags:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;type ShortenerResponse struct {
	Original *string `json:&amp;quot;original_url&amp;quot;`
	Short    *string `json:&amp;quot;short_url&amp;quot;`
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This data structure is essentially only used when marshaling to JSON for the response to a client, or for unmarshalling the contents of my &amp;ldquo;database file&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;For actually doing the work of redirect on demand, I used a map, that takes &lt;code&gt;string&lt;/code&gt;s and translates them directly into other &lt;code&gt;string&lt;/code&gt;s. In short: a requested short URL redirects to the long URL without bothering to iterate over anything.&lt;/p&gt;

&lt;h3 id=&#34;what-happens&#34;&gt;What Happens?&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;a request is routed to the handler function&lt;/li&gt;
&lt;li&gt;the handler checks the map of URLs, and if a match is found, it just redirects to the long URL&lt;/li&gt;
&lt;li&gt;or it calls &lt;code&gt;Shorten&lt;/code&gt; with the URL&lt;/li&gt;
&lt;li&gt;this function verifies that the URL is valid and sends an error response if it is not&lt;/li&gt;
&lt;li&gt;or it calls &lt;code&gt;NewResponse&lt;/code&gt; which builds a response, adds an entry in the map, and returns the Response to &lt;code&gt;Shorten&lt;/code&gt;&amp;hellip;&lt;/li&gt;
&lt;li&gt;which writes the new Response to the DB&amp;hellip;&lt;/li&gt;
&lt;li&gt;and returns the JSON representation of it to the handler&amp;hellip;&lt;/li&gt;
&lt;li&gt;which returns it to the user.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;room-for-improvement&#34;&gt;Room for Improvement&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;use a proper database, even just SQLite, instead of a flat file&lt;/li&gt;
&lt;li&gt;use a better hashing function from long URLs to short URLs, and check for collisions&lt;/li&gt;
&lt;li&gt;do something to better accomodate thread/process scaling, probably running a separate goroutine to issue writes to the DB/map, using channels&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Recurse Center: Accepted</title>
      <link>http://frenata.me/blog/recurse/</link>
      <pubDate>Sun, 23 Apr 2017 10:09:32 +0700</pubDate>
      
      <guid>http://frenata.me/blog/recurse/</guid>
      <description>

&lt;p&gt;I was accepted to the &lt;a href=&#34;https://www.recurse.com/&#34;&gt;Recurse Center&lt;/a&gt; a few days ago, and in the spirit of self-reflection decided to write up a little about my experiences. Since I intend to write up my experience of &lt;em&gt;being&lt;/em&gt; there as well, it&amp;rsquo;s also just good practice.&lt;/p&gt;

&lt;h3 id=&#34;what-is-rc&#34;&gt;What is RC?&lt;/h3&gt;

&lt;p&gt;That turns out to a bit hard to explain, and since I haven&amp;rsquo;t yet been I&amp;rsquo;m not well positioned to even try. I&amp;rsquo;ll let an alumni &lt;a href=&#34;http://aliza.aufri.ch/tig/35-recurse-center-is-like-studying-abroad&#34;&gt;give it a shot&lt;/a&gt; though! Suffice to say that it is sort of structured like a bootcamp but also not at all structured like a bootcamp.&lt;/p&gt;

&lt;p&gt;I first found out about the existence of such a thing from a &lt;a href=&#34;http://jvns.ca/blog/2013/12/04/day-37-how-a-keyboard-works/&#34;&gt;blog post&lt;/a&gt;. The author is exhuberant that a &lt;strong&gt;custom&lt;/strong&gt; operating system she built &amp;ldquo;doesn&amp;rsquo;t crash&amp;rdquo; when she presses any key. The sheer scope of such a project amazed me, and the celebration of small victories was infectious. I started picking through the rest of the blog&amp;rsquo;s archives to try to find out what this incredible place she worked on this was.&lt;/p&gt;

&lt;h3 id=&#34;following-the-white-rabbit&#34;&gt;Following the White Rabbit&lt;/h3&gt;

&lt;p&gt;I read a little about RC from their own website. It was interesting, like nothing I&amp;rsquo;d ever considered before. I talked in very general terms about it with my family&amp;hellip;  I soon found myself captivated by the notion that I could get &amp;ldquo;dramatically better&amp;rdquo; at programming while in the company of incredibly smart and highly motivated people.&lt;/p&gt;

&lt;p&gt;I read more and thought more. Was it rational to try to go to NYC for three months, just for this? RC seemed to have a really good track record on jobs-placement, but I was pretty confident I could land something satisfactory anyway. Was I ready to go back to the USA at all?&lt;/p&gt;

&lt;h3 id=&#34;why-not&#34;&gt;Why Not?&lt;/h3&gt;

&lt;p&gt;Without having high expectations (imposter syndrome?), I decided to apply anyway. The written application wasn&amp;rsquo;t particularly long, so I had little to lose.&lt;/p&gt;

&lt;p&gt;I didn&amp;rsquo;t anticipate losing sleep over it.&lt;/p&gt;

&lt;p&gt;The first interview was exactly what their documentation said it was: a conversation. We talked about my background, life at RC, and the &lt;a href=&#34;https://gist.github.com/frenata/1e4fa63ac2a4a1bfea36ab4692c2326f&#34;&gt;code sample&lt;/a&gt; I&amp;rsquo;d sent them, from last year&amp;rsquo;s &lt;a href=&#34;https://adventofcode.com/&#34;&gt;Advent of Code&lt;/a&gt;. My interviewer had written a bit of Go, but I got to explain channels, which was pretty exciting.&lt;/p&gt;

&lt;p&gt;The second interview was effectively a 30 minute Pair Programming session, starting from a small &lt;a href=&#34;https://gist.github.com/frenata/27258e7508edfd2b88d97efce0fa6c94/1507274cabf2648474b9303e3d9567f4b87ef05e&#34;&gt;lisp parser&lt;/a&gt; I&amp;rsquo;d also written in Go. Together we added an interpreter for the parsed lisps that could evaluate nested addition, like so: &lt;code&gt;(+ 1 (+ 3 4))&lt;/code&gt; == &lt;code&gt;8&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;After three rounds I was confident but reserved. I knew that everything I&amp;rsquo;d read indicated that RC was a good fit, but had I adequately communicated this fit?&lt;/p&gt;

&lt;h3 id=&#34;and-then&#34;&gt;And Then?&lt;/h3&gt;

&lt;p&gt;And then I recieved a beatiful email inviting me to join!&lt;/p&gt;

&lt;p&gt;Somewhat sadly I still need to put off proceeding to pick my batch, since my summer plans are still &lt;code&gt;undefined&lt;/code&gt;. But to NYC I will go sometime this year, in the hopes to improve my craft and meet others doing the same thing.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Speedrun: Request Headers Microservice in Go</title>
      <link>http://frenata.me/blog/speedrun-request-headers/</link>
      <pubDate>Fri, 21 Apr 2017 17:17:53 +0700</pubDate>
      
      <guid>http://frenata.me/blog/speedrun-request-headers/</guid>
      <description>

&lt;h3 id=&#34;fresh-links&#34;&gt;Fresh Links&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://api.frenata.net/headers/&#34;&gt;Deployed App&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/frenata/api-frenata/tree/master/src/headers&#34;&gt;GitHub repo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;wherefore-art-thou-x-forwarded-for&#34;&gt;Wherefore art thou X-Forwarded-For?&lt;/h3&gt;

&lt;p&gt;Apparently the client IP can be sent several different ways, so it was necessary to check various headers. Also along these lines, none of these headers are sent when browsing locally via &lt;code&gt;heroku local&lt;/code&gt;, meaning the only way I could test that this was working properly was &amp;ldquo;in production.&amp;rdquo; Decidedly not ideal.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s the full text of my function to fetch the IP address:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func getIP(headers http.Header) *string {
	possibleKeys := []string{
		&amp;quot;Remote_Addr&amp;quot;,
		&amp;quot;Client-IP&amp;quot;,
		&amp;quot;X-Forwarded-For&amp;quot;,
	}

	for _, key := range possibleKeys {
		if ip := headers.Get(key); ip != &amp;quot;&amp;quot; {
			comma := strings.Index(ip, &amp;quot;,&amp;quot;)
			if comma != -1 {
				ip = ip[:comma]
			}
			return &amp;amp;ip
		}
	}

	return nil
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Given a HTTP header object, this will check the various possible keys, returning the value if the header ccontains that key. There&amp;rsquo;s also a small check for a comma that will ensure only &lt;em&gt;1&lt;/em&gt; address is returned.&lt;/p&gt;

&lt;h3 id=&#34;yes-i-m-pointing-at-you&#34;&gt;Yes, I&amp;rsquo;m Pointing at You&lt;/h3&gt;

&lt;p&gt;Of some note is that this function returns &lt;code&gt;*string&lt;/code&gt; rather than &lt;code&gt;string&lt;/code&gt;. That is, it returns a &lt;em&gt;pointer&lt;/em&gt; to a string rather than a string. This is also why &lt;code&gt;return &amp;amp;ip&lt;/code&gt; is written the way it is. It returns not the string value contained in &lt;code&gt;ip&lt;/code&gt; but the address where this value is stored.&lt;/p&gt;

&lt;p&gt;The reason for this is so that if the IP is not found for some reason, this function can return &lt;code&gt;nil&lt;/code&gt; (aka &lt;code&gt;null&lt;/code&gt;) rather than some specific string value. My Response object accordingly holds &lt;em&gt;pointers&lt;/em&gt; to strings, and when it is &lt;code&gt;Marshal&lt;/code&gt;ed into JSON a &lt;code&gt;nil&lt;/code&gt; value in the IP field will be correctly returned as &lt;code&gt;&amp;quot;ipaddress&amp;quot;: null&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;requirement-clarity&#34;&gt;Requirement: Clarity&lt;/h3&gt;

&lt;p&gt;It wasn&amp;rsquo;t entirely clear, from the user stories given, exactly what &amp;ldquo;operating system&amp;rdquo; data is desired. I made a choice based on the structure of the &lt;code&gt;User-Agent&lt;/code&gt; header, but it could be different. The same is true for my choice to strip out extra IP addresses.&lt;/p&gt;

&lt;h3 id=&#34;room-for-improvement&#34;&gt;Room for Improvement&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Find a way to test client IP when working with a local deployment.&lt;/li&gt;
&lt;li&gt;Possible: display the name of a language instead of a locale string. ie, &amp;ldquo;English&amp;rdquo; instead of &amp;ldquo;en-US&amp;rdquo;.&lt;/li&gt;
&lt;li&gt;Add other interesting headers to the JSON response.&lt;/li&gt;
&lt;li&gt;Add some unit tests, by manually constructing an HTTP header and ensuring that the returned values are accurate.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Speedrun: Timestamp Microservice in Go</title>
      <link>http://frenata.me/blog/speedrun-timestamp/</link>
      <pubDate>Thu, 20 Apr 2017 22:37:08 +0700</pubDate>
      
      <guid>http://frenata.me/blog/speedrun-timestamp/</guid>
      <description>

&lt;h3 id=&#34;why-go&#34;&gt;Why Go?&lt;/h3&gt;

&lt;p&gt;Because I like it, that&amp;rsquo;s why! And it&amp;rsquo;s pragmatic but one-way-to-do-it spirit fits my personality. After spending months with Java for school it is an absolute joy to work with. I&amp;rsquo;ll touch on some of the more interesting things I encountered while working on the project. The details are in the source of course, which I worked hard to keep readable and annotated.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://api.frenata.net/timestamp/&#34;&gt;Deployed App&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/frenata/api-frenata/tree/master/src/timestamp&#34;&gt;GitHub repo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;heroku&#34;&gt;Heroku&lt;/h3&gt;

&lt;p&gt;I had not used Heroku previously, so I spent quite a bit of time just getting started with it. Fortuanely, while not as easy to work with as &lt;a href=&#34;http://surge.sh&#34;&gt;surge.sh&lt;/a&gt; I didn&amp;rsquo;t find it too difficult to get going with. But there were a few snags. Go tooling aside, it wasn&amp;rsquo;t quite as simple as pointing heroku at a binary, but in the end, it wasn&amp;rsquo;t much different than that either.&lt;/p&gt;

&lt;p&gt;There were a few different ways to signal to Heroku that the deployed app is written in Go, but I found the simplest, especially since I didn&amp;rsquo;t plan on using anything other than the standard library, was to use &lt;code&gt;gb&lt;/code&gt;. The instructions for doing so, summarized:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;create a &lt;code&gt;src&lt;/code&gt; directory at your project root&lt;/li&gt;
&lt;li&gt;write some &lt;code&gt;.go&lt;/code&gt; files inside &lt;code&gt;src&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;at least one of which should compile into a binary, let&amp;rsquo;s call it &lt;code&gt;foo&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;create a file called &lt;code&gt;Procfile&lt;/code&gt; in the project root that says: &lt;code&gt;web: foo&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And that&amp;rsquo;s it!&lt;/p&gt;

&lt;h3 id=&#34;serving-millions&#34;&gt;Serving Millions&lt;/h3&gt;

&lt;p&gt;Serving http is dead simple with Go, here is the entirety of a working webserver function:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func main() {
	port := os.Getenv(&amp;quot;PORT&amp;quot;)
	
	http.HandleFunc(&amp;quot;/&amp;quot;, timestamp) 
	http.ListenAndServe(&amp;quot;:&amp;quot;+port, nil)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Grabbing the port from the environment was another snag I ran into. You won&amp;rsquo;t know what port your particular app is being served from, so it needs to be grabbed dynamically. &lt;code&gt;timestamp&lt;/code&gt; in the above code is the name of a function that does the work of reading requests and writing responses. Originally all my logic was in this function, but I later refactored it away so that &lt;code&gt;timestamp&lt;/code&gt; is only concerned with http and any business logic is handled elsewhere.&lt;/p&gt;

&lt;h3 id=&#34;jason-and-the-argonauts&#34;&gt;Jason and the Argonauts&lt;/h3&gt;

&lt;p&gt;Go also has some pleasant tools to work with JSON. I defined a concrete type to hold the data:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;type TimeResponse struct {
	Unix    *string `json:&amp;quot;unix&amp;quot;`
	Natural *string `json:&amp;quot;natural&amp;quot;`
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Converting a value of this type to JSON notation can be performed with &lt;code&gt;json.MarshalIndent(someResponseValue, &amp;quot;&amp;quot;, &amp;quot;    &amp;quot;)&lt;/code&gt; &lt;code&gt;json.Marshal&lt;/code&gt; would do the same thing without the extra arguments and thus no pretty printing.&lt;/p&gt;

&lt;h3 id=&#34;time-flies-when-you-re-coding&#34;&gt;Time Flies When You&amp;rsquo;re Coding&lt;/h3&gt;

&lt;p&gt;Go has a bit of unique way to represent time formats (any string representation of a certain fixed date), but I took advantage of the relative ease of defining them to extend the user story beyond the requirements, allowing a great variety of date formats to be parsed correctly. &lt;code&gt;https://timestamp-go.herokuapp.com/12/25/2017/&lt;/code&gt; was particularly fun to get working. Great apologies to the rest of the world, but I choose the American way to parse that style of date.&lt;/p&gt;

&lt;h3 id=&#34;room-for-improvement&#34;&gt;Room for Improvement&lt;/h3&gt;

&lt;p&gt;How could this particular project be improved?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The instructions page is pure text, so even a little html and css would make it more pleasant to read.&lt;/li&gt;
&lt;li&gt;More time formats!&lt;/li&gt;
&lt;li&gt;Optional query string to request a certain format of natural date/time.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;gitter-done&#34;&gt;Gitter Done&lt;/h3&gt;

&lt;p&gt;A brief technical note, for myself as much as anything, since I&amp;rsquo;m holding the code for this in my overarching fcc repo, I used a git subtree to push just the relevant code to a branch. Heroku is configured to do automatic deployments from this branch. The incantation is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git subtree push --prefix timestamp/go/ origin timestamp-go
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This &lt;em&gt;must&lt;/em&gt; be performed in the repo root, but will push only a specific directory &lt;code&gt;timestamp/go/&lt;/code&gt; to a specific branch &lt;code&gt;timestamp-go&lt;/code&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Android Architecture, Part 3</title>
      <link>http://frenata.me/blog/android-architecture-3/</link>
      <pubDate>Thu, 20 Apr 2017 20:37:08 +0700</pubDate>
      
      <guid>http://frenata.me/blog/android-architecture-3/</guid>
      <description>

&lt;h3 id=&#34;previously&#34;&gt;Previously&lt;/h3&gt;

&lt;p&gt;After implementing a &lt;a href=&#34;../android-architecture-1&#34;&gt;class hierarchy&lt;/a&gt; and a unified point of database access via a &lt;a href=&#34;../android-architecture-2&#34;&gt;Content Provider&lt;/a&gt; the core mechanisms of my app were in place: the ability to do basic CRUD (Create, Retrieve, Update, Delete) actions on the various types in my database. It was time to put the finishing touches, not all of which were trivial.&lt;/p&gt;

&lt;h3 id=&#34;time-keeps-ticking&#34;&gt;Time Keeps Ticking&amp;hellip;&lt;/h3&gt;

&lt;p&gt;The first major task was to enable the user to create notifications for the various data types, most of which had date fields attached. However, in order to get the database functionality working, I had skipped any attempt at verifying user entered dates, which were stored in the SQLite database as plain strings. While a well intentioned user would no doubt enter real dates instead of &lt;code&gt;&amp;quot;next week&amp;quot;&lt;/code&gt;, it didn&amp;rsquo;t seem right to cause notifications to fail for incorrectly written dates, either silently or explicitly.&lt;/p&gt;

&lt;p&gt;Related was the question of the order of items on the lists of terms/courses/assessments. Keeping with &amp;ldquo;getting it done&amp;rdquo; I had sorted them simply by the name of the entry, knowing I would eventually want to &amp;ldquo;do it right&amp;rdquo;. That &lt;em&gt;time&lt;/em&gt; was of course now.&lt;/p&gt;

&lt;p&gt;First I enforced that user entered dates be in a specific format, &lt;code&gt;23 April 2017&lt;/code&gt;. But while simple to enter by text and obvious to read, this type of data is not easily sortable. I needed to translate dates into something more like a timestamp for storage in the SQLite database. Thus was a class born &lt;code&gt;DateFormatter&lt;/code&gt;, which contained several static helper methods to translate dates from my chosen human readable format, to a timestamp, and back again. I would also add methods to translate dates into Unix epoch timestamps, since this is how I would schedule notifications.&lt;/p&gt;

&lt;h3 id=&#34;notify-me&#34;&gt;Notify Me&lt;/h3&gt;

&lt;p&gt;Actually getting notifications working wasn&amp;rsquo;t entirely trivial either, but not from a coding standpoint. This was the first time I ran into the stumbling block of the Internet: host to information about many different ways of working with Android apps, all from different APIs and few marked clearly.&lt;/p&gt;

&lt;p&gt;I pressed on, found a strategy that worked and implemented it. Testing it consisted of forcing the menu items to schedule notifications not on the date specified, but some fixed amount of time, say 5 seconds, after &lt;code&gt;SystemClock.elapsedRealtime()&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;worth-a-thousand-sloc&#34;&gt;Worth a Thousand SLOC&lt;/h3&gt;

&lt;p&gt;Next up was attaching camera photos to notes. I had kept putting this off because it felt like it would be complicated, but truly Android makes the simple things complicated and the complicated things simple. The actual code to call out to the camera to take a picture?&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public void takePicture(View view) {
	Intent takePictureIntent = 
		new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
	if (takePictureIntent.resolveActivity(
				getPackageManager()) != null) {
		startActivityForResult(
				takePictureIntent, 
				REQUEST_IMAGE_CAPTURE);
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Taking the image and forcing it into and out of the database was somewhat more involved, but not very. SQL has a datatype &lt;code&gt;blob&lt;/code&gt; for a reason. (Though &lt;em&gt;better&lt;/em&gt; practice would probably have been to save a URI for the photo)&lt;/p&gt;

&lt;p&gt;SMS was scarely more complicated:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;private void sendSMS() {
	Uri uri = Uri.parse(&amp;quot;content://contacts&amp;quot;);
	Intent intent = new Intent(Intent.ACTION_PICK, uri);
	intent.setType(
			ContactsContract.
			CommonDataKinds.
			Phone.CONTENT_TYPE);
	startActivityForResult(intent, 1);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;minor-minor-minor&#34;&gt;Minor Minor Minor&lt;/h3&gt;

&lt;p&gt;There were a few other minor details to fulfill various requirements or my own sense of pride:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;finding something semi-reasonable to store not in the SQLite database, but with SharedPrefs&lt;/li&gt;
&lt;li&gt;making sure that somewhere I was using an &lt;code&gt;ArrayList&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;fixing a nagging &lt;code&gt;InternalException&lt;/code&gt; that had not disrupted anything but been hitting the logs since the beginning of the project&lt;/li&gt;
&lt;li&gt;validating deletion of database items to prevent orphaned data&lt;/li&gt;
&lt;li&gt;adding a wider selection of sample data&lt;/li&gt;
&lt;li&gt;icons&lt;/li&gt;
&lt;li&gt;reducing some layout duplication&lt;/li&gt;
&lt;li&gt;refactoring the massive amount of duplicated code in the &lt;code&gt;ContentProvider&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;wrapping-it-up-in-an-apk&#34;&gt;Wrapping it up in an APK&lt;/h3&gt;

&lt;p&gt;Ultimately I learned a lot, including that working with XML is not my idea of fun and that mobile app development might not be either. You can certainly develop something rapidly if you know what you&amp;rsquo;re doing, but boilerplate is everywhere. Android Studio seems almost a necessity, just to keep track of the massive Android library. Discerning which information is from too far in the past to be of use, which information is for an API too far in the future to be of use, and which information is just right is a massive pain.&lt;/p&gt;

&lt;p&gt;Making it all look good is certainly not as easy as it looks. It may be some time before I revisit Android development, but I&amp;rsquo;m glad I was pushed to do it.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Android Architecture, Part 2</title>
      <link>http://frenata.me/blog/android-architecture-2/</link>
      <pubDate>Mon, 17 Apr 2017 14:07:20 +0700</pubDate>
      
      <guid>http://frenata.me/blog/android-architecture-2/</guid>
      <description>&lt;p&gt;After bulding the basics of my &lt;a href=&#34;../android-architecture-1&#34;&gt;android app&lt;/a&gt;, I had a simple app that could display/edit lists of school terms. The problem? The requirements specified that the app have terms, courses associated with each term, assessments associated with each course, and notes associated with each course &lt;em&gt;or&lt;/em&gt; assessment.&lt;/p&gt;

&lt;p&gt;That was fine, after all I was armed with all kinds of SQL database design knowledge after 3 courses at WGU, so I rapidly stubbed out java classes for each of these entities. Each relationship was a simple many-to-one relationship, so &lt;code&gt;Course&lt;/code&gt; table needed to maintain a foreign key pointing to the associated &lt;code&gt;Term&lt;/code&gt;, the &lt;code&gt;Assessment&lt;/code&gt; table needed to maintain a foreign key pointing to the associated &lt;code&gt;Course&lt;/code&gt;, and so on.&lt;/p&gt;

&lt;p&gt;Each class handled it&amp;rsquo;s own table definition rules, and my &lt;code&gt;DBHelper&lt;/code&gt; class now opened the database, then when needing to create or upgrade, called methods from each entitiy class to create each table. Add some sample data in my main activity&amp;rsquo;s &lt;code&gt;onCreate&lt;/code&gt; method, and&amp;hellip; &lt;code&gt;Exceptions: table course does not exist&lt;/code&gt;. Since the database already existed and I hadn&amp;rsquo;t incremented the verison number, rerunning my app and calling more table creation methods did nothing. My very hacky fix was to uninstall the app and then reload it onto the emulator, although I just now realized that a more sensible idea would have been to create a simple method in the &lt;code&gt;DBHelper&lt;/code&gt; to drop all the tables and delete the database, then tie this to a menu action. Lesson learned.&lt;/p&gt;

&lt;p&gt;My database redefined, I turned to listing all the courses. And ran into the &lt;code&gt;ContentProvider&lt;/code&gt;, which in its &lt;code&gt;insert&lt;/code&gt;, &lt;code&gt;update&lt;/code&gt;, and &lt;code&gt;delete&lt;/code&gt; methods was referring directly to the &lt;code&gt;Term&lt;/code&gt; class. Did I need separate providers for each table? That didn&amp;rsquo;t seem right.&lt;/p&gt;

&lt;p&gt;After chewing on the problem for a while (and sleeping on it, which always helps me), I settled on the pattern explained in &lt;a href=&#34;http://stackoverflow.com/questions/3814005/best-practices-for-exposing-multiple-tables-using-content-providers-in-android&#34;&gt;this stackoverflow post&lt;/a&gt;. I didn&amp;rsquo;t realize it at the time, but this style is used internally by android as well. An example, from my finished ContentProvider:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@Override
public int update(
		Uri uri, 
		ContentValues values, 
		String selection, 
		String[] selectionArgs) {

	String table;

	switch (uriMatcher.match(uri)) {
		case TERMS:
			table = Term.TABLE; break;
		case COURSES:
			table = Course.TABLE; break;
		case ASSESSMENTS:
			table = Assessment.TABLE; break;
		case COURSE_NOTES:
			table = CourseNote.TABLE; break;
		case ASSESSMENT_NOTES:
			table = AssessmentNote.TABLE; break;
		default:
			table = &amp;quot;&amp;quot;; break;
	}
	return !table.isEmpty() ?
		database.update(table,
				values,
				selection,
				selectionArgs) : 0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This general pattern proved hugely useful, so that the &lt;code&gt;ContentProvider&lt;/code&gt; handled most aspects of interacting with the database correctly, so long as it was given the proper URI, which are defined as public constants in the &lt;code&gt;ContentProvider&lt;/code&gt; itself. Because it was also necessary for courses to understand what term they were in and build the appropriate WHERE clause, the classes are sadly fairly coupled together, but having the &lt;code&gt;ContentProvider&lt;/code&gt; handle most aspects of DB interaction is a step in the right direction. Further refactoring could likely reduce coupling throughout the codebase.&lt;/p&gt;

&lt;p&gt;From this point on, I implemented the entire database structure as specified by the requirements, absent pictures in notes, which I decided to save for another day.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Android Architecture, Part 1</title>
      <link>http://frenata.me/blog/android-architecture-1/</link>
      <pubDate>Sat, 15 Apr 2017 21:39:47 +0700</pubDate>
      
      <guid>http://frenata.me/blog/android-architecture-1/</guid>
      <description>&lt;p&gt;Frustrated by communication issues while working on my WGU capstone/thesis, I recently turned to the only other class I have left: Mobile Application Development. I was fairly excited by this (I get to build Android apps!), but the reality of the class was somewhat intimidating. There is no objective assessment, only a performance assessment that involves building an actual app. Fine. But provided materials are&amp;hellip;minimal. No problem, I thought, since android development is so popular there should be plenty of information freely available on the web!&lt;/p&gt;

&lt;p&gt;While my original plan was to work through some of Udacity&amp;rsquo;s free material on Android, then to launch into the class project, I realized that the time left in my term was quickly running out. Not having time to learn it &amp;ldquo;the right way&amp;rdquo;, I resolved to &amp;ldquo;fake it until I made it,&amp;rdquo; passing the class, and revisiting android development proper when my time permits. My first step was to follow a tutorial to build a working app along similar lines to what I needed to eventually build. I pulled from two tutorials to get the basics rolling:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Lynda&amp;rsquo;s &lt;a href=&#34;https://www.lynda.com/Android-tutorials/Building-Note-Taking-App-Android/377485-2.html&#34;&gt;Note-Taking App&lt;/a&gt; video tutorial, which was specifically linked on the WGU course page&lt;/li&gt;
&lt;li&gt;Vogella&amp;rsquo;s &lt;a href=&#34;http://www.vogella.com/tutorials/AndroidSQLite/article.html&#34;&gt;Android SQLite database tutorial&lt;/a&gt;, which is just text and lots of code samples, covering a variety of ways to interact with a SQLite database in Android&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I primarily followed the Lynda tutorials, adjusting and learning as I went. For instance, that tutorial uses a very simple DB table with just two columns: the text of the note and the id (primary key) of the note. For even the simplest of my tables I needed to store at least 4 pieces of information: a term title, start and end dates, and the id. Thus my app quickly diverged from the tutorial, with multiple relevant fields complicating the layout files. To list data, android provides some basic list layouts, but they hold only up to two pieces of info. Since I wanted to dispaly three pieces of information, I had to build my own custom list layout.&lt;/p&gt;

&lt;p&gt;I kept the basic class structure the same, although looking forward somewhat I seperated my &lt;code&gt;TermTable&lt;/code&gt;, representing a single SQL table, from my &lt;code&gt;SchedulerDBHelper&lt;/code&gt;, which opens/creates/upgrades the database itself, and my &lt;code&gt;SchedulerProvider&lt;/code&gt;, which is a ContentProvider to allow &amp;ldquo;easy&amp;rdquo; access to the database. Early on, I also implemented a separate &lt;code&gt;Term&lt;/code&gt; class to handle bundling of the values from the &lt;code&gt;TermTable&lt;/code&gt; table, but I later merged these together into a single class called &lt;code&gt;Term&lt;/code&gt;, to handle all things related to a &amp;ldquo;term&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;From that point on, working through the rest of the tutorials was relatively straightforward, until I had a working app that let me display lists of terms and edit them, all backed by a SQLite database. But of course, this was only the beginning.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>FOSSASIA: Lessons Learned</title>
      <link>http://frenata.me/blog/Lessons-Learned/</link>
      <pubDate>Fri, 24 Mar 2017 15:05:02 +0700</pubDate>
      
      <guid>http://frenata.me/blog/Lessons-Learned/</guid>
      <description>&lt;p&gt;What I learned from volunteering at &lt;a href=&#34;../FOSS-ASIA-2017&#34;&gt;FOSS ASIA&lt;/a&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Say yes.

&lt;ul&gt;
&lt;li&gt;If you don&amp;rsquo;t know how to do that thing, be upfront about that lack, ask for advice in how to do it, then say yes anyway&lt;/li&gt;
&lt;li&gt;But don&amp;rsquo;t wait to be asked, look for a need and try to help fill it.&lt;/li&gt;
&lt;li&gt;Arriving early never hurts.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Talk about yourself.

&lt;ul&gt;
&lt;li&gt;It took me a few days to nail down a &amp;ldquo;here&amp;rsquo;s who I am/what I do/what I&amp;rsquo;m interested in&amp;rdquo; routine.&lt;/li&gt;
&lt;li&gt;Cards are good if you have them, but so is a well-maintained LinkedIn.&lt;/li&gt;
&lt;li&gt;Ask good questions about what other people are doing.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Start conversations.

&lt;ul&gt;
&lt;li&gt;If the room is full of developers, you&amp;rsquo;re probably far from the only introvert/shy person.&lt;/li&gt;
&lt;li&gt;Ask around about social gatherings. At least one attendee came to the speaker/team-only event just because she asked about it.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>FOSS ASIA 2017</title>
      <link>http://frenata.me/blog/FOSS-ASIA-2017/</link>
      <pubDate>Fri, 24 Mar 2017 14:58:40 +0700</pubDate>
      
      <guid>http://frenata.me/blog/FOSS-ASIA-2017/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;../My-First-Conference&#34;&gt;My first conference&lt;/a&gt; had gone acceptably well, but I had resolved to &lt;strong&gt;be better&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;When the stars aligned and I was able to attend another conference this March, FOSSASIA 2017, I &lt;em&gt;was&lt;/em&gt; better. Drawing on yet another tidbit of advice (from where I know not), I decided that rather than just buying a ticket and attending the conference I would volunteer. Ideally this would force me to engage with people rather the particulars of technical talks.&lt;/p&gt;

&lt;p&gt;There was plenty of opportunity before the conference to assist: most notably with the actual software that would power the registration and the event scheduling, but a brutal set of obligations all mananged to collide in the weeks beforehand and I didn&amp;rsquo;t participate. Instead, I arrived in Singapore two days early, ready to attend a volunteer briefing on Thursday, the day before the conference began. I made it to the venue, struggled to the rest of the team, and sat down for a coffee to communicate on the WhatsApp chat channel.&lt;/p&gt;

&lt;p&gt;Pretty much because I was there, I was grabbed to help out with the wifi deployment and provisioning, and so I soon found myself scurrying around, plugging into WiFi access points, running new ethernet cabling, and crimping connectors. As these things go, there were last minute changes and issues to overcome, but overcome them we did: myself, another out of town volunteer, and two of the primary organizers. The most important thing I did that day? (Beyond having the 568-A/B standards memorized, which really didn&amp;rsquo;t matter that much.) I said yes when asked if I could help.&lt;/p&gt;

&lt;p&gt;I spent the next day greeting every speaker, attendee, and exhibitor that came through the doors, directing them to the appropriate places, and solving problems like missing conference badges. &amp;ldquo;Wal-mart greeter&amp;rdquo; is perhaps not anyone&amp;rsquo;s idea of a great job, but it&amp;rsquo;s actually a pretty awesome gig to quickly writeup a custom badge for a sponsor from Google, or in a pinch help diagnose WiFi connectivity issues.&lt;/p&gt;

&lt;p&gt;The second day, I was assigned to &amp;ldquo;moderate&amp;rdquo; the exhibtors hall, so I spent the day talking to various vendors, making sure they had what they needed, running errands, and generally trying to make their lives easier. And in the meantime I had plenty of opportunity to talk to people about some amazing projects: building radio telescopes to talk to amateur sattelites, &amp;ldquo;flying&amp;rdquo; a airplane with brainwaves, building a village in China using entirely open-source designs and tools, and doing augmented-reality with HTML/CSS.&lt;/p&gt;

&lt;p&gt;I ambled into the conference on the third day a little bleary, having been kept up most of the night by an apparently all night party in the room next door at my hostel. I wasn&amp;rsquo;t scheduled for any tasks, so I thought I might have the chance to actually listen to some talks&amp;hellip; Well I sort of did. I was quickly grabbed and assigned to take the place of a missing volunteer to run the talks in the largest breakout room. What followed was a not-great morning of me stumbling through a job I didn&amp;rsquo;t expect, but again, I said yes.&lt;/p&gt;

&lt;p&gt;In between many hours of hard work, rushed meals, and achey feet were evening social events where I had the chance to chat casually with people I&amp;rsquo;d met at various other times throughout the conference or meet others I hadn&amp;rsquo;t quite connected with. Highlights from these and other social ocassions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;somehow finding myself in between an active Linux kernel developer and an active FreeBSD kernel developer discussing the relative merits of each ecosystem&lt;/li&gt;
&lt;li&gt;an &amp;ldquo;American moment&amp;rdquo; between Jakarta-based me, a Singapore-based executive, and a Hong Kong-based developer where we shared how much we like visiting the USA but not actually living there&lt;/li&gt;
&lt;li&gt;talking about the big project I&amp;rsquo;m working on with people actually familiar with the tech stack&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But what &lt;a href=&#34;../Lessons-Learned&#34;&gt;did I learn&lt;/a&gt;?&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>My First Conference</title>
      <link>http://frenata.me/blog/My-First-Conference/</link>
      <pubDate>Fri, 24 Mar 2017 14:56:34 +0700</pubDate>
      
      <guid>http://frenata.me/blog/My-First-Conference/</guid>
      <description>&lt;p&gt;Last August, at the first technical conference in my rebirthed career as a developer, I spent the entirety of the first day rushing about from session to session, taking notes about interesting ideas and spending most of the elaborate luncheon thinking about which talks I would listen to later that day. But while the tidbits of insight I gained were no doubt highly entertaining at the time, the only thing I can clearly recall 7 months later was a discussion of how Hollywood adapted its view of Computer Security over time.&lt;/p&gt;

&lt;p&gt;Since that talk and my listing of films got me watching &lt;em&gt;Tron&lt;/em&gt; and &lt;em&gt;Space Camp&lt;/em&gt; for the first time I can&amp;rsquo;t entirely complain, but something was missing.&lt;/p&gt;

&lt;p&gt;I spent that first night curled up with Google, trying to identify how better to engage in the later days of the conference. The clear answer shining through: people matter more than technical talks, so go talk to them! I did my best and connected with a well know personality who lived in the same city as me.&lt;/p&gt;

&lt;p&gt;But believe it or not, walking up to strangers, introducing myself, and engaging in conversation is not a strength of mine. A shocking admission from a lifelong nerd, I know. I resolved to &lt;a href=&#34;../FOSS-ASIA-2017&#34;&gt;be better&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>elastic</title>
      <link>http://frenata.me/blog/elastic/</link>
      <pubDate>Sat, 04 Feb 2017 15:41:19 +0700</pubDate>
      
      <guid>http://frenata.me/blog/elastic/</guid>
      <description>&lt;p&gt;I&amp;rsquo;m diving into learning the Elastic stack: Logstash, Elasticsearch, Kibana. My aim is to use it to enable the local school here to extract useful information from the reams of lesson plan .docs they have laying around. Useless data right now.&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s &lt;em&gt;a bunch&lt;/em&gt; going on, and the actual process I&amp;rsquo;ll need to follow to ETL the data I do have into a usuable state isn&amp;rsquo;t entirely clear to me yet. I know I can just throw it into elastic and get full text search, but the data is semi-structured already, so I&amp;rsquo;d like to be able to extract ESLRs, times, teacher names into fields outright.&lt;/p&gt;

&lt;p&gt;Too much theory on a bunch of interlocking systems is confusing, so my next task is to follow the &lt;a href=&#34;https://www.elastic.co/guide/en/elasticsearch/guide/current/index.html&#34;&gt;documentation&lt;/a&gt;, test some simpler use cases, then work back on my desired project.&lt;/p&gt;

&lt;p&gt;I anticipate this will be my WGU capstone, so I&amp;rsquo;ll be working up lots of documentation along the way.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hustle</title>
      <link>http://frenata.me/blog/Hustle/</link>
      <pubDate>Mon, 23 Jan 2017 12:08:06 +0700</pubDate>
      
      <guid>http://frenata.me/blog/Hustle/</guid>
      <description>&lt;p&gt;After spending what seemed like the entire month of December and about half of January doing nothing but schoolwork, life is calming down. Between me and graduation are only 3 things:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the OCP certification test&lt;/li&gt;
&lt;li&gt;a prescribed Android app project&lt;/li&gt;
&lt;li&gt;my capstone, essentially this is a senior thesis that will need to heavily emphasize the SDLC&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I have plenty of time. So much so that in addition to planning to buck for a capstone excellence award, I have time and energy to devote to other things.&lt;/p&gt;

&lt;p&gt;Beyond raising the sweet baby Reuel I mean.&lt;/p&gt;

&lt;p&gt;Where am I allocating this excess of energy? After all, one can&amp;rsquo;t study for the OCP all day every day.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I&amp;rsquo;ve gone back to doing some FCC exercises, and hanging out in their gitter. My knowledge of JS, espespecially the advanced frameworks, is pretty sparse and although I don&amp;rsquo;t exactly want to develop React apps for a living, I figure it can only make me more well rounded.&lt;/li&gt;
&lt;li&gt;In contrast, the little time I&amp;rsquo;ve spent learning the basics of infosec/pentesting is so much more deligtful, if less directly applicable to career advancement.&lt;/li&gt;
&lt;li&gt;Which brings up the major way I&amp;rsquo;ve spent time, in job/interview prep of one variety or another. At a minmum I need to beat my resume into something workable, highlighting as much as possible what experince I do have.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Blogging is sadly not yet part of my daily or weekly workflow, though perhaps it should be. I&amp;rsquo;m getting there, and hope to write more about all of the above.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>